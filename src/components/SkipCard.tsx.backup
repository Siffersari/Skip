import React, { useState, useCallback, useMemo } from 'react';
import { motion } from 'framer-motion';
import { 
  ChevronDown, 
  Truck, 
  Calendar,
  CheckCircle2,
  Info,
  AlertTriangle,
  Navigation,
  Package,
  Eye,
  Layers
} from 'lucide-react';
import { SkipCardProps } from '../types';
import { Skip3D } from './3d';

interface EnhancedSkipCardProps extends SkipCardProps {
  show3D?: boolean;
  enable3DToggle?: boolean;
  autoRotate3D?: boolean;
}

const SkipCard: React.FC<EnhancedSkipCardProps> = React.memo(({ 
  skip, 
  isSelected, 
  onSelect, 
  isLoading = false,
  showDetails: externalShowDetails,
  show3D = false,
  enable3DToggle = true,
  autoRotate3D = false
}) => {
  const [internalShowDetails, setInternalShowDetails] = useState(false);
  const [imageError, setImageError] = useState(false);
  const [is3DView, setIs3DView] = useState(show3D);
  const [is3DLoading, setIs3DLoading] = useState(false);
  const [is3DError, setIs3DError] = useState(false);

  const showDetails = externalShowDetails !== undefined ? externalShowDetails : internalShowDetails;

  const handleCardClick = useCallback(() => {
    if (!isLoading) {
      onSelect(skip);
    }
  }, [isLoading, onSelect, skip]);

  const handleDetailsToggle = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    if (externalShowDetails === undefined) {
      setInternalShowDetails(prev => !prev);
    }
  }, [externalShowDetails]);

  const handleImageError = useCallback(() => {
    setImageError(true);
  }, []);

  const handle3DToggle = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    if (!is3DView) {
      setIs3DLoading(true);
    }
    setIs3DView(!is3DView);
    setIs3DError(false);
  }, [is3DView]);

  const handle3DLoad = useCallback(() => {
    setIs3DLoading(false);
  }, []);

  const handle3DError = useCallback((error: Error) => {
    console.warn('3D visualization error:', error);
    setIs3DError(true);
    setIs3DLoading(false);
    // Fallback to 2D view
    setIs3DView(false);
  }, []);

  // Check if skip size is supported by 3D component
  const is3DSupported = useMemo(() => {
    const supportedSizes = [4, 6, 8, 10, 12, 14, 16, 20, 40];
    return supportedSizes.includes(skip.size);
  }, [skip.size]);

  const suitabilityInfo = useMemo(() => {
    if (skip.size <= 4) {
      return {
        quick: 'Small domestic projects, garden clearouts, DIY work',
        detailed: [
          'Small household clearouts (1-2 rooms)',
          'Garden waste and prunings',
          'Bathroom renovations',
          'Small kitchen refits',
          'DIY projects and repairs'
        ]
      };
    } else if (skip.size <= 8) {
      return {
        quick: 'Medium projects, home renovations, construction waste',
        detailed: [
          'Kitchen and bathroom renovations',
          'Home extension work',
          'Large garden clearouts',
          'Flooring and tiling projects',
          'General construction waste'
        ]
      };
    } else {
      return {
        quick: 'Large projects, commercial work, major construction',
        detailed: [
          'Major construction projects',
          'Commercial property clearouts',
          'Large-scale renovations',
          'Industrial waste disposal',
          'Office fit-out waste'
        ]
      };
    }
  }, [skip.size]);

  const imageUrl = useMemo(() => {
    if (imageError) {
      return `https://via.placeholder.com/400x300/FEF3C7/D97706?text=${skip.size}+Yard+Skip`;
    }
    return skip.placeholder_image || `https://picsum.photos/400/300?random=${skip.size}`;
  }, [imageError, skip.placeholder_image, skip.size]);

  return (
    <motion.div
      className={`
        relative bg-white rounded-xl border-2 transition-all duration-300 cursor-pointer overflow-hidden flex flex-col
        ${isSelected 
          ? 'border-primary-400 shadow-lg' 
          : 'border-gray-200 hover:border-primary-300 hover:shadow-lg'
        }
        ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}
      `}
      onClick={handleCardClick}
      whileHover={!isLoading ? { y: -2, scale: 1.01 } : {}}
      whileTap={!isLoading ? { scale: 0.99 } : {}}
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4, ease: "easeOut" }}
    >
      {isSelected && (
        <motion.div
          className="absolute top-3 left-3 sm:top-4 sm:left-4 bg-primary-500 text-white px-2.5 py-1 sm:px-3 sm:py-1.5 rounded-full text-xs sm:text-sm font-medium flex items-center space-x-1 shadow-sm z-30"
          initial={{ scale: 0, x: -20, y: -20 }}
          animate={{ scale: 1, x: 0, y: 0 }}
          transition={{ type: "spring", stiffness: 300, damping: 20, delay: 0.1 }}
        >
          <CheckCircle2 className="w-3 h-3 sm:w-4 sm:h-4" />
          <span>Selected</span>
        </motion.div>
      )}

      {/* 3D/2D Toggle Button */}
      {enable3DToggle && is3DSupported && (
        <motion.button
          onClick={handle3DToggle}
          className="absolute top-3 right-3 sm:top-4 sm:right-4 z-30 bg-white/90 hover:bg-white backdrop-blur-sm rounded-lg p-2 shadow-sm transition-all duration-200 flex items-center gap-1.5"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          initial={{ opacity: 0, scale: 0 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.3 }}
        >
          {is3DView ? (
            <>
              <Eye className="w-3 h-3 sm:w-4 sm:h-4 text-gray-600" />
              <span className="text-xs font-medium text-gray-600 hidden sm:inline">2D</span>
            </>
          ) : (
            <>
              <Layers className="w-3 h-3 sm:w-4 sm:h-4 text-gray-600" />
              <span className="text-xs font-medium text-gray-600 hidden sm:inline">3D</span>
            </>
          )}
        </motion.button>
      )}

      {/* Image/3D Display Area */}
      <div className="relative h-48 sm:h-56 overflow-hidden bg-gray-100">
        {is3DView && is3DSupported ? (
          <motion.div
            className="w-full h-full"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.5 }}
          >
            <Skip3D
              size={skip.size as any}
              showReference={false}
              autoRotate={autoRotate3D}
              className="w-full h-full"
              onLoad={handle3DLoad}
              onError={handle3DError}
            />
            {/* 3D Loading Overlay */}
            {is3DLoading && (
              <div className="absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center">
                <div className="text-center">
                  <div className="w-8 h-8 border-2 border-gray-200 border-t-primary-500 rounded-full animate-spin mx-auto mb-2"></div>
                  <p className="text-sm text-gray-600">Loading 3D view...</p>
                </div>
              </div>
            )}
          </motion.div>
        ) : (
          <motion.div
            className="w-full h-full"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            <img
              src={imageUrl}
              alt={`${skip.size} yard skip`}
              className="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
              onError={handleImageError}
              loading="lazy"
            />
          </motion.div>
        )}
        
        <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent" />
        
        {/* 3D Badge when in 3D mode */}
        {is3DView && is3DSupported && !is3DLoading && !is3DError && (
          <motion.div
            className="absolute bottom-3 left-3 bg-blue-600 text-white px-2 py-1 rounded text-xs font-medium"
            initial={{ opacity: 0, scale: 0 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.5 }}
          >
            3D View
          </motion.div>
        )}
        
        <div className="absolute bottom-3 right-3 sm:hidden">
          <div className="bg-white/90 backdrop-blur-sm rounded-full p-2">
            <CheckCircle2 className={`w-5 h-5 ${isSelected ? 'text-primary-600' : 'text-gray-400'}`} />
          </div>
        </div>
      </div>

      <div className="p-4 sm:p-6 flex-1 flex flex-col">
        <div className="flex items-start justify-between mb-3 sm:mb-4">
          <div className="flex items-center space-x-2 sm:space-x-3 flex-1">
            <motion.div 
              className={`
                w-10 h-10 sm:w-12 sm:h-12 rounded-xl flex items-center justify-center flex-shrink-0
                ${isSelected ? 'bg-primary-100' : 'bg-gray-100'}
              `}
              animate={{ 
                backgroundColor: isSelected ? '#DBEAFE' : '#F3F4F6',
                scale: isSelected ? 1.05 : 1
              }}
              transition={{ duration: 0.3 }}
            >
              <Truck className={`w-5 h-5 sm:w-6 sm:h-6 ${isSelected ? 'text-primary-600' : 'text-gray-600'}`} />
            </motion.div>
            <div className="min-w-0 flex-1">
              <h3 className="text-base sm:text-lg font-bold text-gray-900 truncate">
                {skip.display_name || `${skip.size} Yard Skip`}
              </h3>
              <p className="text-xs sm:text-sm text-gray-600">{skip.size} cubic yards</p>
            </div>
          </div>
          
          <div className="text-right flex-shrink-0">
            <motion.div 
              className={`text-xl sm:text-3xl font-bold ${isSelected ? 'text-primary-600' : 'text-gray-900'}`}
              animate={{ scale: isSelected ? 1.05 : 1 }}
              transition={{ duration: 0.3 }}
            >
              Â£{skip.total_price}
            </motion.div>
            <div className="text-xs text-gray-500">Inc. VAT</div>
            <div className="text-xs text-gray-400 hidden sm:block">
              (Â£{skip.price_before_vat} + VAT)
            </div>
          </div>
        </div>

        <div className="space-y-2 sm:space-y-3 mb-3 sm:mb-4">
          <div className="flex items-center space-x-2 text-xs sm:text-sm text-gray-600">
            <Calendar className="w-3 h-3 sm:w-4 sm:h-4 text-primary-500 flex-shrink-0" />
            <span>{skip.hire_period_days} day hire period</span>
          </div>
          
          <div className="flex items-center space-x-2 text-xs sm:text-sm text-gray-600">
            <Navigation className="w-3 h-3 sm:w-4 sm:h-4 text-primary-500 flex-shrink-0" />
            <span className={skip.allowed_on_road ? 'text-green-600' : 'text-orange-600'}>
              {skip.allowed_on_road ? 'Can be placed on road' : 'Not allowed on road'}
            </span>
          </div>

          <div className="flex items-center space-x-2 text-xs sm:text-sm text-gray-600">
            <Package className="w-3 h-3 sm:w-4 sm:h-4 text-primary-500 flex-shrink-0" />
            <span className={skip.allows_heavy_waste ? 'text-green-600' : 'text-orange-600'}>
              {skip.allows_heavy_waste ? 'Heavy waste allowed' : 'Light waste only'}
            </span>
          </div>
        </div>

        <div className="mb-3 sm:mb-4 flex-1">
          <div className="flex items-center space-x-2 mb-2">
            <Info className="w-3 h-3 sm:w-4 sm:h-4 text-green-500 flex-shrink-0" />
            <span className="text-xs sm:text-sm font-medium text-gray-700">Suitable for:</span>
          </div>
          <div className="text-xs sm:text-sm text-gray-600 line-clamp-2">
            {suitabilityInfo.quick}
          </div>
        </div>

        <div className="mt-auto">
          {externalShowDetails === undefined && (
            <motion.button
              onClick={handleDetailsToggle}
              className="flex items-center justify-between w-full p-2 sm:p-3 text-xs sm:text-sm text-gray-600 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors touch-target-min-44"
              whileHover={{ scale: 1.01 }}
              whileTap={{ scale: 0.99 }}
            >
              <span>View Details</span>
              <motion.div
                animate={{ rotate: showDetails ? 180 : 0 }}
                transition={{ duration: 0.3 }}
              >
                <ChevronDown className="w-3 h-3 sm:w-4 sm:h-4" />
              </motion.div>
            </motion.button>
          )}

          <motion.div
            initial={false}
            animate={{ 
              height: showDetails ? 'auto' : 0,
              opacity: showDetails ? 1 : 0
            }}
            transition={{ duration: 0.3, ease: "easeInOut" }}
            className="overflow-hidden"
          >
            {showDetails && (
              <div className="pt-3 sm:pt-4 space-y-3 sm:space-y-4">
                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    <Info className="w-3 h-3 sm:w-4 sm:h-4 text-green-500 flex-shrink-0" />
                    <span className="text-xs sm:text-sm font-medium text-gray-700">Specific uses:</span>
                  </div>
                  <ul className="text-xs sm:text-sm text-gray-600 space-y-1">
                    {suitabilityInfo.detailed.map((item, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <CheckCircle2 className="w-3 h-3 text-green-500 flex-shrink-0 mt-0.5" />
                        <span>{item}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                {(skip.transport_cost !== null || skip.per_tonne_cost !== null) && (
                  <div>
                    <div className="flex items-center space-x-2 mb-2">
                      <Info className="w-3 h-3 sm:w-4 sm:h-4 text-blue-500 flex-shrink-0" />
                      <span className="text-xs sm:text-sm font-medium text-gray-700">Pricing details:</span>
                    </div>
                    <div className="text-xs sm:text-sm text-gray-600 space-y-1">
                      {skip.transport_cost !== null && (
                        <div className="flex items-center justify-between">
                          <span>Transport cost:</span>
                          <span className="font-medium">
                            {skip.transport_cost === 0 ? 'Included' : `Â£${skip.transport_cost}`}
                          </span>
                        </div>
                      )}
                      {skip.per_tonne_cost !== null && (
                        <div className="flex items-center justify-between">
                          <span>Per tonne cost:</span>
                          <span className="font-medium">
                            {skip.per_tonne_cost === 0 ? 'Included' : `Â£${skip.per_tonne_cost}/tonne`}
                          </span>
                        </div>
                      )}
                      {(skip.transport_cost === 0 || skip.per_tonne_cost === 0) && (
                        <div className="text-xs text-green-600 mt-1">
                          Base price includes all costs shown above
                        </div>
                      )}
                    </div>
                  </div>
                )}

                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    <AlertTriangle className="w-3 h-3 sm:w-4 sm:h-4 text-orange-500 flex-shrink-0" />
                    <span className="text-xs sm:text-sm font-medium text-gray-700">Restrictions:</span>
                  </div>
                  <ul className="text-xs sm:text-sm text-gray-600 space-y-1">
                    <li className="flex items-start space-x-2">
                      <AlertTriangle className="w-3 h-3 text-orange-500 flex-shrink-0 mt-0.5" />
                      <span>No hazardous materials</span>
                    </li>
                    <li className="flex items-start space-x-2">
                      <AlertTriangle className="w-3 h-3 text-orange-500 flex-shrink-0 mt-0.5" />
                      <span>No electrical appliances</span>
                    </li>
                    {!skip.allows_heavy_waste && (
                      <li className="flex items-start space-x-2">
                        <AlertTriangle className="w-3 h-3 text-orange-500 flex-shrink-0 mt-0.5" />
                        <span>No concrete, soil, or rubble</span>
                      </li>
                    )}
                  </ul>
                </div>

                <div className="pt-2 sm:pt-3 border-t border-gray-200">
                  <div className="text-xs sm:text-sm text-gray-500 space-y-1">
                    <p><strong>Delivery:</strong> Same-day or next-day available</p>
                    <p><strong>Collection:</strong> Automatic after {skip.hire_period_days} days</p>
                    <p><strong>Payment:</strong> Pay on delivery or online</p>
                  </div>
                </div>
              </div>
            )}
          </motion.div>
        </div>
      </div>
    </motion.div>
  );
});

SkipCard.displayName = 'SkipCard';

export default SkipCard; 